apply plugin: 'com.android.application'

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.qiangxi.demo"
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                it.argument('moduleName', project.getName())
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

//验证depends Task是否一定在finalizedBy Task之后执行，验证结果是：depends Task一定在finalizedBy Task之后执行
task buildBundleDebug() << {
    print("buildBundleDebug")
}

task buildbundledebug() << {
    sleep(5000)
    print("buildbundledebug")
}

task test123() << {
    print("test123")
}

buildBundleDebug.finalizedBy buildbundledebug
test123.dependsOn buildBundleDebug

//查找有无同名（忽略大小写）的task的代码块
project.afterEvaluate {
    def taskName = tasks.findAll { it.name.equalsIgnoreCase("buildbundledebug") }
    taskName.each {
        println("taskname=${it.name}")
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation "io.reactivex.rxjava2:rxjava:2.2.2"
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation 'de.hdodenhof:circleimageview:2.2.0'
//    annotationProcessor "com.yy.mobile:arouter-compiler:${basesdk_version}"
//    implementation "com.yy.mobile.plugin.common:com.yy.mobile.arouter-api:${basesdk_version}"
//    implementation "com.yy.mobile.plugin.common:com.yy.mobile.arouter-annotation:${basesdk_version}"

}

task A() {
    doLast {
        println("A...")
    }
}
task B(dependsOn: A) {
    doLast {
        println("B...")
    }
}
task C(dependsOn: B) {
    doLast {
        println("C...")
    }
}
task D(dependsOn: [C]) {
    doLast {
        println("D...")
    }
}
A.mustRunAfter D
