apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
//apply from: project.file("../ktbuild.gradle.kts")

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.qiangxi.demo"
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
//        testInstrumentationRunner "androidx.test1.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                it.argument('moduleName', project.getName())
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "version"
    productFlavors {
        demo {
            // Assigns this product flavor to the "version" flavor dimension.
            // This property is optional if you are using only one dimension.
            dimension "version"
            applicationIdSuffix ".demo"
            versionNameSuffix "-demo"
        }
        full {
            dimension "version"
            applicationIdSuffix ".full"
            versionNameSuffix "-full"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

//验证depends Task是否一定在finalizedBy Task之后执行，验证结果是：depends Task一定在finalizedBy Task之后执行
//task buildBundleDebug() << {
//    print("buildBundleDebug")
//}
//
//task buildbundledebug() << {
//    sleep(5000)
//    print("buildbundledebug")
//}
//
//task test123() << {
//    print("test123")
//}
//
//buildBundleDebug.finalizedBy buildbundledebug
//test123.dependsOn buildBundleDebug

//查找有无同名（忽略大小写）的task的代码块
//project.afterEvaluate {
//    def taskName = tasks.findAll { it.name.equalsIgnoreCase("buildbundledebug") }
//    taskName.each {
//        println("taskname=${it.name}")
//    }
//}

configurations {
    customConfig
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-alpha2'
    implementation 'androidx.appcompat:appcompat:1.0.2'
    testImplementation 'junit:junit:4.12'
//    androidTestImplementation 'androidx.test:runner:1.1.0'
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    implementation "io.reactivex.rxjava2:rxjava:2.2.2"
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation 'de.hdodenhof:circleimageview:2.2.0'
    implementation 'com.google.android.material:material:1.0.0'

    customConfig 'tgf:hth:4.5.3'
//    annotationProcessor "com.yy.mobile:arouter-compiler:${basesdk_version}"
//    implementation "com.yy.mobile.plugin.common:com.yy.mobile.arouter-api:${basesdk_version}"
//    implementation "com.yy.mobile.plugin.common:com.yy.mobile.arouter-annotation:${basesdk_version}"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.0' //协程稳定版
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.0'
    //协程稳定版-android专用
    implementation project(':test')
    implementation project(':test2')

}

//task A() {
//    doLast {
//        println("A...")
//    }
//}
//task B(dependsOn: A) {
//    doLast {
//        println("B...")
//    }
//}
//task C(dependsOn: B) {
//    doLast {
//        println("C...")
//    }
//}
//task D(dependsOn: [C]) {
//    doLast {
//        println("D...")
//    }
//}
//A.mustRunAfter D

//task varTest() {
//    doLast{
//        android.applicationVariants.each{
//            println("""name=${it.name}, flavor = ${it.flavorName}, getDirName = ${it.dirName},
//            buildType = ${it.buildType.name}""")
//
//        }
//
//    }
//}

task configTest {
    doLast {
        project.configurations.findByName("customConfig").asPath
        project.configurations.findByName("customConfig").getDependencies().each {
            println("name = ${it.name},group =  ${it.group}, reason=${it.reason}, version = ${it.version}, type = " +
                    "${it.class.superclass.simpleName}")
        }
//        println()
//        println()
//        println()
//        println()
//        project.configurations.findByName("implementation").getArtifacts().each {
//            println("name = ${it.name},classifier =  ${it.classifier}, date=${it.date}, extension = ${it.extension}, " +
//                    "file = ${it.file},type = ${it.type},type = ${it.class.superclass.simpleName}")
//        }
////        project.configurations.each {
////            println("${it.name}")
////            println("${project.configurations.findByName(it.name)}")
////            println("${project.configurations.findByName(it.name) instanceof Configuration }")
//
////        }
    }
}

//beforeEvaluate {
//    configurations.create("rqq")
//}
//
//afterEvaluate {
//    tasks.withType(JavaCompile) {
//        classpath.each {
//            println("name = ${it.name},path =  ${it.absolutePath}")
//        }
//        println()
//        println()
//        println()
//        println("name = ${name}, path = ${path}")
//
//    }
//}

task createConfig() {
    doLast {
//        def config = project.configurations.findByName('customConfig')
//        config.allArtifacts.all {PublishArtifact pa->
//            println("${pa.name}")
//
//        }
//        config.dependencies.all {Dependency dep->
//            println("${dep.name}")
//        }
//        afterEvaluate {
//            tasks.withType(JavaCompile) {
//                classpath.each {
//                    println("name = ${it.name},path =  ${it.absolutePath}")
//                }
//
//            }
//            tasks.all { Task t ->
//                if (t.name.toLowerCase().contains("javacompile")) {
//
//                }
//      ∑∑      }
//        }

//        config.allDependencies.each {Dependency de ->
//          println("""group = ${de.group}, excludeRules = ${de.excludeRules}""")
//
//        }
//       def f =  config.asPath
//        println("""canBeResolved = ${config.canBeResolved}, canBeConsumed = ${config.canBeConsumed},
//, state = ${config.state}""")
    }

}
//afterEvaluate {
//
//    configurations.findByName("customConfig").allArtifacts.each {
//        println("""name = ${it.name}""")
//    }
//}



tasks.create("rqq123").dependsOn =  configurations.findByName("customConfig").incoming.artifacts
tasks.findByName("rqq123").doLast {
    println("name = ${configurations.findByName("customConfig").incoming.artifacts.artifactFiles}")
}